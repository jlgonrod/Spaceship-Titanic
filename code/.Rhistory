df <- df %>%
mutate(PassengerGroup=
as.character(sapply(strsplit(PassengerId,"_"), `[`, 1))) %>%
mutate(PassengerNumInGroup=
as.factor(sapply(strsplit(PassengerId,"_"), `[`, 2))) %>%
mutate(CabinPlatform =
as.factor(sapply(strsplit(Cabin,"/"), `[`, 1))) %>%
mutate(CabinNumber =
as.integer(sapply(strsplit(Cabin,"/"), `[`, 2))) %>%
mutate(CabinSide =
as.factor(sapply(strsplit(Cabin,"/"), `[`, 3)))
df <- select(df, -Cabin)
summary(df)
levels(df$HomePlanet) <- c("Unknown", "Earth", "Europa", "Mars")
levels(df$Destination) <- c("Unknown", "55 Cancri e", "PSO J318.5-22",
"TRAPPIST-1e")
sapply(df, function(x) sum(length(which(is.na(x)))))
df <- subset(df, !is.na(df$Age) & !is.na(df$CryoSleep) & !is.na(df$CabinPlatform) & !is.na(df$CabinNumber) & !is.na(df$CabinSide), select = colnames(df))
df <- subset(df, !is.na(df$VIP), select = colnames(df))
dfGr <- na.omit(df)
dfGr %>%
group_by(dfGr$VIP) %>%
summarize(across(c(RoomService, FoodCourt, ShoppingMall, Spa, VRDeck),mean, na.rm = TRUE))
roomServiceVIP = mean(df[df$VIP == TRUE,]$RoomService, na.rm = TRUE)
roomServiceNVIP = mean(df[df$VIP == FALSE,]$RoomService, na.rm = TRUE)
foodCourtVIP = mean(df[df$VIP == TRUE,]$FoodCourt, na.rm = TRUE)
foodCourtNVIP = mean(df[df$VIP == FALSE,]$FoodCourt, na.rm = TRUE)
shoppingMallVIP = mean(df[df$VIP == TRUE,]$ShoppingMall, na.rm = TRUE)
shoppingMallNVIP = mean(df[df$VIP == FALSE,]$ShoppingMall, na.rm = TRUE)
spaVIP = mean(df[df$VIP == TRUE,]$Spa, na.rm = TRUE)
spaNVIP = mean(df[df$VIP == FALSE,]$Spa, na.rm = TRUE)
vrdeckVIP = mean(df[df$VIP == TRUE,]$VRDeck, na.rm = TRUE)
vrdeckNVIP = mean(df[df$VIP == FALSE,]$VRDeck, na.rm = TRUE)
df$RoomService[is.na(df$RoomService) & df$VIP == TRUE] <- roomServiceVIP
df$RoomService[is.na(df$RoomService) & df$VIP == FALSE] <- roomServiceNVIP
df$FoodCourt[is.na(df$FoodCourt) & df$VIP == TRUE] <- foodCourtVIP
df$FoodCourt[is.na(df$FoodCourt) & df$VIP == FALSE] <- foodCourtNVIP
df$ShoppingMall[is.na(df$ShoppingMall) & df$VIP == TRUE] <- shoppingMallVIP
df$ShoppingMall[is.na(df$ShoppingMall) & df$VIP == FALSE] <- shoppingMallNVIP
df$Spa[is.na(df$Spa) & df$VIP == TRUE] <- spaVIP
df$Spa[is.na(df$Spa) & df$VIP == FALSE] <- spaNVIP
df$VRDeck[is.na(df$VRDeck) & df$VIP == TRUE] <- vrdeckVIP
df$VRDeck[is.na(df$VRDeck) & df$VIP == FALSE] <- vrdeckNVIP
sapply(df, function(x) sum(length(which(is.na(x)))))
boxplotCols <- c("RoomService","FoodCourt","ShoppingMall","Spa","VRDeck")
boxplot(select(df, boxplotCols), col = rainbow(length(boxplotCols)))
ggplot(data = df) + geom_bar(mapping = aes(x = Transported, fill = Transported))
df %>%
count(Transported)
df_exp <- df
df_exp$TotalExpenses <- df_exp$RoomService + df_exp$FoodCourt + df_exp$ShoppingMall + df_exp$Spa + df_exp$VRDeck
df_exp <- select(df_exp, c("HomePlanet", "CryoSleep", "Destination", "Age", "VIP", "PassengerGroup", "CabinPlatform", "CabinSide", "TotalExpenses", "Transported"))
ggplot(data = df_exp, mapping = aes(x = TotalExpenses)) + geom_freqpoly(mapping = aes(colour = Transported), binwidth = 100)
library(arules)
table(discretize(df_exp$TotalExpenses, "cluster" ))
hist(df_exp$TotalExpenses,main="Distribución de Gasto por Pasajero",xlab="Gasto", ylab="Pasajeros",col = "ivory")
abline(v=discretize(df_exp$TotalExpenses, method="cluster", onlycuts=TRUE),col="red")
df_exp$TotalExpenses_KM <- discretize(df_exp$TotalExpenses, "cluster" )
ggplot(data = df_exp) + geom_bar(mapping = aes(x = Transported, fill = TotalExpenses_KM), position = "fill")
ggplot(data = df_exp) + geom_count(mapping = aes(x = Transported, y = CabinSide))
df_exp %>%
count(Transported, CabinPlatform) %>%
ggplot(mapping = aes(x = Transported, y = CabinPlatform)) + geom_tile(mapping = aes(fill = n))
df_exp %>%
count(Transported, CryoSleep) %>%
ggplot(mapping = aes(x = Transported, y = CryoSleep)) + geom_tile(mapping = aes(fill = n))
par(mfrow=c(1,2))
hist(df$RoomService)
qqnorm(df$RoomService, main="Q-Q RoomService")
qqline(df$RoomService,col=2)
ad.test(df$RoomService)
par(mfrow=c(1,2))
hist(df$FoodCourt)
qqnorm(df$FoodCourt, main="Q-Q FoodCourt")
qqline(df$FoodCourt,col=2)
ad.test(df$FoodCourt)
par(mfrow=c(1,2))
hist(df$ShoppingMall)
qqnorm(df$ShoppingMall, main="Q-Q ShoppingMall")
qqline(df$ShoppingMall,col=2)
ad.test(df$ShoppingMall)
par(mfrow=c(1,2))
hist(df$Spa)
qqnorm(df$Spa, main="Q-Q Spa")
qqline(df$Spa,col=2)
ad.test(df$Spa)
par(mfrow=c(1,2))
hist(df$VRDeck)
qqnorm(df$VRDeck, main="Q-Q VRDeck")
qqline(df$VRDeck,col=2)
ad.test(df$VRDeck)
par(mfrow=c(1,2))
hist(df$Age)
qqnorm(df$Age, main="Q-Q Age")
qqline(df$Age,col=2)
ad.test(df$Age)
fligner.test(RoomService ~Transported, data=df)
boxplot(RoomService~Transported, data = df,
main="Comprobación de homocedasticidad para RoomService",
ylim=c(0,2000))
fligner.test(FoodCourt ~Transported, data=df)
boxplot(FoodCourt~Transported, data = df,
main="Comprobación de homocedasticidad para FoodCourt",
ylim=c(0,500))
fligner.test(ShoppingMall ~Transported, data=df)
boxplot(ShoppingMall~Transported, data = df,
main="Comprobación de homocedasticidad para ShoppingMall",
ylim=c(0,300))
fligner.test(Spa ~Transported, data=df)
boxplot(Spa~Transported, data = df,
main="Comprobación de homocedasticidad para Spa",
ylim=c(0,1500))
fligner.test(VRDeck ~Transported, data=df)
boxplot(VRDeck~Transported, data = df,
main="Comprobación de homocedasticidad para VRDeck", ylim=c(0,1200))
fligner.test(Age ~ Transported, data=df)
boxplot(Age~Transported, data = df,
main="Comprobación de homocedasticidad para Age")
df_cor <- df[,2:18]
knitr::opts_chunk$set(echo = TRUE)
# Package names
packages <- c("tidyr", "dplyr","ggplot2", "keras","reshape2","tidyverse",
"caret","ROCR", "knitr", 'nortest', "bestNormalize")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
set.seed(15463)
df <- read.csv("~/MASTER CIENCIA DE DATOS/Tipologia y ciclo de vida de los datos/Practicas/Práctica2/Ejercicio/Repositorio/data/raw_data/train.csv",
colClasses=c("HomePlanet"="factor",
"CryoSleep"="logical",
"Destination"="factor",
"VIP"="logical",
"Transported"="logical"))
df$Age <- as.integer(df$Age)
str(df)
df <- select(df, -Name)
df <- df %>%
mutate(PassengerGroup=
as.character(sapply(strsplit(PassengerId,"_"), `[`, 1))) %>%
mutate(PassengerNumInGroup=
as.factor(sapply(strsplit(PassengerId,"_"), `[`, 2))) %>%
mutate(CabinPlatform =
as.factor(sapply(strsplit(Cabin,"/"), `[`, 1))) %>%
mutate(CabinNumber =
as.integer(sapply(strsplit(Cabin,"/"), `[`, 2))) %>%
mutate(CabinSide =
as.factor(sapply(strsplit(Cabin,"/"), `[`, 3)))
df <- select(df, -Cabin)
summary(df)
levels(df$HomePlanet) <- c("Unknown", "Earth", "Europa", "Mars")
levels(df$Destination) <- c("Unknown", "55 Cancri e", "PSO J318.5-22",
"TRAPPIST-1e")
sapply(df, function(x) sum(length(which(is.na(x)))))
df <- subset(df, !is.na(df$Age) & !is.na(df$CryoSleep) & !is.na(df$CabinPlatform) & !is.na(df$CabinNumber) & !is.na(df$CabinSide), select = colnames(df))
df <- subset(df, !is.na(df$VIP), select = colnames(df))
dfGr <- na.omit(df)
dfGr %>%
group_by(dfGr$VIP) %>%
summarize(across(c(RoomService, FoodCourt, ShoppingMall, Spa, VRDeck),mean, na.rm = TRUE))
roomServiceVIP = mean(df[df$VIP == TRUE,]$RoomService, na.rm = TRUE)
roomServiceNVIP = mean(df[df$VIP == FALSE,]$RoomService, na.rm = TRUE)
foodCourtVIP = mean(df[df$VIP == TRUE,]$FoodCourt, na.rm = TRUE)
foodCourtNVIP = mean(df[df$VIP == FALSE,]$FoodCourt, na.rm = TRUE)
shoppingMallVIP = mean(df[df$VIP == TRUE,]$ShoppingMall, na.rm = TRUE)
shoppingMallNVIP = mean(df[df$VIP == FALSE,]$ShoppingMall, na.rm = TRUE)
spaVIP = mean(df[df$VIP == TRUE,]$Spa, na.rm = TRUE)
spaNVIP = mean(df[df$VIP == FALSE,]$Spa, na.rm = TRUE)
vrdeckVIP = mean(df[df$VIP == TRUE,]$VRDeck, na.rm = TRUE)
vrdeckNVIP = mean(df[df$VIP == FALSE,]$VRDeck, na.rm = TRUE)
df$RoomService[is.na(df$RoomService) & df$VIP == TRUE] <- roomServiceVIP
df$RoomService[is.na(df$RoomService) & df$VIP == FALSE] <- roomServiceNVIP
df$FoodCourt[is.na(df$FoodCourt) & df$VIP == TRUE] <- foodCourtVIP
df$FoodCourt[is.na(df$FoodCourt) & df$VIP == FALSE] <- foodCourtNVIP
df$ShoppingMall[is.na(df$ShoppingMall) & df$VIP == TRUE] <- shoppingMallVIP
df$ShoppingMall[is.na(df$ShoppingMall) & df$VIP == FALSE] <- shoppingMallNVIP
df$Spa[is.na(df$Spa) & df$VIP == TRUE] <- spaVIP
df$Spa[is.na(df$Spa) & df$VIP == FALSE] <- spaNVIP
df$VRDeck[is.na(df$VRDeck) & df$VIP == TRUE] <- vrdeckVIP
df$VRDeck[is.na(df$VRDeck) & df$VIP == FALSE] <- vrdeckNVIP
sapply(df, function(x) sum(length(which(is.na(x)))))
boxplotCols <- c("RoomService","FoodCourt","ShoppingMall","Spa","VRDeck")
boxplot(select(df, boxplotCols), col = rainbow(length(boxplotCols)))
ggplot(data = df) + geom_bar(mapping = aes(x = Transported, fill = Transported))
df %>%
count(Transported)
df_exp <- df
df_exp$TotalExpenses <- df_exp$RoomService + df_exp$FoodCourt + df_exp$ShoppingMall + df_exp$Spa + df_exp$VRDeck
df_exp <- select(df_exp, c("HomePlanet", "CryoSleep", "Destination", "Age", "VIP", "PassengerGroup", "CabinPlatform", "CabinSide", "TotalExpenses", "Transported"))
ggplot(data = df_exp, mapping = aes(x = TotalExpenses)) + geom_freqpoly(mapping = aes(colour = Transported), binwidth = 100)
library(arules)
table(discretize(df_exp$TotalExpenses, "cluster" ))
hist(df_exp$TotalExpenses,main="Distribución de Gasto por Pasajero",xlab="Gasto", ylab="Pasajeros",col = "ivory")
abline(v=discretize(df_exp$TotalExpenses, method="cluster", onlycuts=TRUE),col="red")
df_exp$TotalExpenses_KM <- discretize(df_exp$TotalExpenses, "cluster" )
ggplot(data = df_exp) + geom_bar(mapping = aes(x = Transported, fill = TotalExpenses_KM), position = "fill")
ggplot(data = df_exp) + geom_count(mapping = aes(x = Transported, y = CabinSide))
df_exp %>%
count(Transported, CabinPlatform) %>%
ggplot(mapping = aes(x = Transported, y = CabinPlatform)) + geom_tile(mapping = aes(fill = n))
df_exp %>%
count(Transported, CryoSleep) %>%
ggplot(mapping = aes(x = Transported, y = CryoSleep)) + geom_tile(mapping = aes(fill = n))
par(mfrow=c(1,2))
hist(df$RoomService)
qqnorm(df$RoomService, main="Q-Q RoomService")
qqline(df$RoomService,col=2)
ad.test(df$RoomService)
par(mfrow=c(1,2))
hist(df$FoodCourt)
qqnorm(df$FoodCourt, main="Q-Q FoodCourt")
qqline(df$FoodCourt,col=2)
ad.test(df$FoodCourt)
par(mfrow=c(1,2))
hist(df$ShoppingMall)
qqnorm(df$ShoppingMall, main="Q-Q ShoppingMall")
qqline(df$ShoppingMall,col=2)
ad.test(df$ShoppingMall)
par(mfrow=c(1,2))
hist(df$Spa)
qqnorm(df$Spa, main="Q-Q Spa")
qqline(df$Spa,col=2)
ad.test(df$Spa)
par(mfrow=c(1,2))
hist(df$VRDeck)
qqnorm(df$VRDeck, main="Q-Q VRDeck")
qqline(df$VRDeck,col=2)
ad.test(df$VRDeck)
par(mfrow=c(1,2))
hist(df$Age)
qqnorm(df$Age, main="Q-Q Age")
qqline(df$Age,col=2)
ad.test(df$Age)
fligner.test(RoomService ~Transported, data=df)
boxplot(RoomService~Transported, data = df,
main="Comprobación de homocedasticidad para RoomService",
ylim=c(0,2000))
fligner.test(FoodCourt ~Transported, data=df)
boxplot(FoodCourt~Transported, data = df,
main="Comprobación de homocedasticidad para FoodCourt",
ylim=c(0,500))
fligner.test(ShoppingMall ~Transported, data=df)
boxplot(ShoppingMall~Transported, data = df,
main="Comprobación de homocedasticidad para ShoppingMall",
ylim=c(0,300))
fligner.test(Spa ~Transported, data=df)
boxplot(Spa~Transported, data = df,
main="Comprobación de homocedasticidad para Spa",
ylim=c(0,1500))
fligner.test(VRDeck ~Transported, data=df)
boxplot(VRDeck~Transported, data = df,
main="Comprobación de homocedasticidad para VRDeck", ylim=c(0,1200))
fligner.test(Age ~ Transported, data=df)
boxplot(Age~Transported, data = df,
main="Comprobación de homocedasticidad para Age")
df_cor <- df[,2:18]
df_cor <- df[,2:17]
df_cor <- df_cor[,-12:-13]
df_cor$HomePlanet <- unclass(df_cor$HomePlanet)
df_cor$Destination <- unclass(df_cor$Destination)
df_cor$VIP <- unclass(df_cor$VIP)
df_cor$Transported <- unclass(df_cor$Transported)
df_cor$CabinPlatform <- unclass(df_cor$HomePlanet)
df_cor$CabinSide <- unclass(df_cor$HomePlanet)
df_cor$CryoSleep[df_cor$CryoSleep==TRUE] = 1
df_cor$CryoSleep[df_cor$CryoSleep==FALSE] = 0
df_cor$VIP[df_cor$VIP==TRUE] = 1
df_cor$VIP[df_cor$VIP==FALSE] = 0
df_cor$Transported[df_cor$Transported==TRUE] = 1
df_cor$Transported[df_cor$Transported==FALSE] = 0
head(df_cor)
df_cor[] <- lapply(df_cor, function(x) as.numeric(as.character(x)))
head(df_cor)
res<- cor(df_cor, method = "spearman", use = "complete.obs")
round(res, 2)
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
knitr::opts_chunk$set(echo = TRUE)
# Package names
packages <- c("tidyr", "dplyr","ggplot2", "keras","reshape2","tidyverse",
"caret","ROCR", "knitr", 'nortest', "bestNormalize","corrplot",
"arules")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
set.seed(15463)
df <- read.csv("~/MASTER CIENCIA DE DATOS/Tipologia y ciclo de vida de los datos/Practicas/Práctica2/Ejercicio/Repositorio/data/raw_data/train.csv",
colClasses=c("HomePlanet"="factor",
"CryoSleep"="logical",
"Destination"="factor",
"VIP"="logical",
"Transported"="logical"))
df$Age <- as.integer(df$Age)
str(df)
df <- select(df, -Name)
df <- df %>%
mutate(PassengerGroup=
as.character(sapply(strsplit(PassengerId,"_"), `[`, 1))) %>%
mutate(PassengerNumInGroup=
as.factor(sapply(strsplit(PassengerId,"_"), `[`, 2))) %>%
mutate(CabinPlatform =
as.factor(sapply(strsplit(Cabin,"/"), `[`, 1))) %>%
mutate(CabinNumber =
as.integer(sapply(strsplit(Cabin,"/"), `[`, 2))) %>%
mutate(CabinSide =
as.factor(sapply(strsplit(Cabin,"/"), `[`, 3)))
df <- select(df, -Cabin)
summary(df)
levels(df$HomePlanet) <- c("Unknown", "Earth", "Europa", "Mars")
levels(df$Destination) <- c("Unknown", "55 Cancri e", "PSO J318.5-22",
"TRAPPIST-1e")
sapply(df, function(x) sum(length(which(is.na(x)))))
df <- subset(df, !is.na(df$Age) &
!is.na(df$CryoSleep) &
!is.na(df$CabinPlatform) &
!is.na(df$CabinNumber) &
!is.na(df$CabinSide),
select = colnames(df))
df <- subset(df, !is.na(df$VIP), select = colnames(df))
dfGr <- na.omit(df)
dfGr %>%
group_by(dfGr$VIP) %>%
summarize(across(c(RoomService, FoodCourt, ShoppingMall, Spa, VRDeck),
mean,
na.rm = TRUE))
roomServiceVIP = mean(df[df$VIP == TRUE,]$RoomService, na.rm = TRUE)
roomServiceNVIP = mean(df[df$VIP == FALSE,]$RoomService, na.rm = TRUE)
foodCourtVIP = mean(df[df$VIP == TRUE,]$FoodCourt, na.rm = TRUE)
foodCourtNVIP = mean(df[df$VIP == FALSE,]$FoodCourt, na.rm = TRUE)
shoppingMallVIP = mean(df[df$VIP == TRUE,]$ShoppingMall, na.rm = TRUE)
shoppingMallNVIP = mean(df[df$VIP == FALSE,]$ShoppingMall, na.rm = TRUE)
spaVIP = mean(df[df$VIP == TRUE,]$Spa, na.rm = TRUE)
spaNVIP = mean(df[df$VIP == FALSE,]$Spa, na.rm = TRUE)
vrdeckVIP = mean(df[df$VIP == TRUE,]$VRDeck, na.rm = TRUE)
vrdeckNVIP = mean(df[df$VIP == FALSE,]$VRDeck, na.rm = TRUE)
df$RoomService[is.na(df$RoomService) & df$VIP == TRUE] <- roomServiceVIP
df$RoomService[is.na(df$RoomService) & df$VIP == FALSE] <- roomServiceNVIP
df$FoodCourt[is.na(df$FoodCourt) & df$VIP == TRUE] <- foodCourtVIP
df$FoodCourt[is.na(df$FoodCourt) & df$VIP == FALSE] <- foodCourtNVIP
df$ShoppingMall[is.na(df$ShoppingMall) & df$VIP == TRUE] <- shoppingMallVIP
df$ShoppingMall[is.na(df$ShoppingMall) & df$VIP == FALSE] <- shoppingMallNVIP
df$Spa[is.na(df$Spa) & df$VIP == TRUE] <- spaVIP
df$Spa[is.na(df$Spa) & df$VIP == FALSE] <- spaNVIP
df$VRDeck[is.na(df$VRDeck) & df$VIP == TRUE] <- vrdeckVIP
df$VRDeck[is.na(df$VRDeck) & df$VIP == FALSE] <- vrdeckNVIP
sapply(df, function(x) sum(length(which(is.na(x)))))
boxplotCols <- c("RoomService","FoodCourt","ShoppingMall","Spa","VRDeck")
boxplot(select(df, boxplotCols), col = rainbow(length(boxplotCols)))
ggplot(data = df) + geom_bar(mapping = aes(x = Transported, fill = Transported))
df %>%
count(Transported)
df_exp <- df
df_exp$TotalExpenses <- df_exp$RoomService + df_exp$FoodCourt + df_exp$ShoppingMall + df_exp$Spa + df_exp$VRDeck
df_exp <- select(df_exp, c("HomePlanet", "CryoSleep", "Destination", "Age", "VIP", "PassengerGroup", "CabinPlatform", "CabinSide", "TotalExpenses", "Transported"))
ggplot(data = df_exp, mapping = aes(x = TotalExpenses)) + geom_freqpoly(mapping = aes(colour = Transported), binwidth = 100)
table(discretize(df_exp$TotalExpenses, "cluster" ))
hist(df_exp$TotalExpenses,main="Distribución de Gasto por Pasajero",xlab="Gasto", ylab="Pasajeros",col = "ivory")
abline(v=discretize(df_exp$TotalExpenses, method="cluster", onlycuts=TRUE),col="red")
df_exp$TotalExpenses_KM <- discretize(df_exp$TotalExpenses, "cluster" )
ggplot(data = df_exp) + geom_bar(mapping = aes(x = Transported, fill = TotalExpenses_KM), position = "fill")
ggplot(data = df_exp) + geom_count(mapping = aes(x = Transported, y = CabinSide))
df_exp %>%
count(Transported, CabinPlatform) %>%
ggplot(mapping = aes(x = Transported, y = CabinPlatform)) + geom_tile(mapping = aes(fill = n))
df_exp %>%
count(Transported, CryoSleep) %>%
ggplot(mapping = aes(x = Transported, y = CryoSleep)) + geom_tile(mapping = aes(fill = n))
par(mfrow=c(1,2))
hist(df$RoomService)
qqnorm(df$RoomService, main="Q-Q RoomService")
qqline(df$RoomService,col=2)
ad.test(df$RoomService)
par(mfrow=c(1,2))
hist(df$FoodCourt)
qqnorm(df$FoodCourt, main="Q-Q FoodCourt")
qqline(df$FoodCourt,col=2)
ad.test(df$FoodCourt)
par(mfrow=c(1,2))
hist(df$ShoppingMall)
qqnorm(df$ShoppingMall, main="Q-Q ShoppingMall")
qqline(df$ShoppingMall,col=2)
ad.test(df$ShoppingMall)
par(mfrow=c(1,2))
hist(df$Spa)
qqnorm(df$Spa, main="Q-Q Spa")
qqline(df$Spa,col=2)
ad.test(df$Spa)
par(mfrow=c(1,2))
hist(df$VRDeck)
qqnorm(df$VRDeck, main="Q-Q VRDeck")
qqline(df$VRDeck,col=2)
ad.test(df$VRDeck)
par(mfrow=c(1,2))
hist(df$Age)
qqnorm(df$Age, main="Q-Q Age")
qqline(df$Age,col=2)
ad.test(df$Age)
fligner.test(RoomService ~Transported, data=df)
boxplot(RoomService~Transported, data = df,
main="Comprobación de homocedasticidad para RoomService",
ylim=c(0,2000))
fligner.test(FoodCourt ~Transported, data=df)
boxplot(FoodCourt~Transported, data = df,
main="Comprobación de homocedasticidad para FoodCourt",
ylim=c(0,500))
fligner.test(ShoppingMall ~Transported, data=df)
boxplot(ShoppingMall~Transported, data = df,
main="Comprobación de homocedasticidad para ShoppingMall",
ylim=c(0,300))
fligner.test(Spa ~Transported, data=df)
boxplot(Spa~Transported, data = df,
main="Comprobación de homocedasticidad para Spa",
ylim=c(0,1500))
fligner.test(VRDeck ~Transported, data=df)
boxplot(VRDeck~Transported, data = df,
main="Comprobación de homocedasticidad para VRDeck", ylim=c(0,1200))
fligner.test(Age ~ Transported, data=df)
boxplot(Age~Transported, data = df,
main="Comprobación de homocedasticidad para Age")
df_cor <- df[,2:17]
df_cor <- df_cor[,-12:-13]
df_cor$HomePlanet <- unclass(df_cor$HomePlanet)
df_cor$Destination <- unclass(df_cor$Destination)
df_cor$VIP <- unclass(df_cor$VIP)
df_cor$Transported <- unclass(df_cor$Transported)
df_cor$CabinPlatform <- unclass(df_cor$HomePlanet)
df_cor$CabinSide <- unclass(df_cor$HomePlanet)
df_cor$CryoSleep[df_cor$CryoSleep==TRUE] = 1
df_cor$CryoSleep[df_cor$CryoSleep==FALSE] = 0
df_cor$VIP[df_cor$VIP==TRUE] = 1
df_cor$VIP[df_cor$VIP==FALSE] = 0
df_cor$Transported[df_cor$Transported==TRUE] = 1
df_cor$Transported[df_cor$Transported==FALSE] = 0
head(df_cor)
df_cor[] <- lapply(df_cor, function(x) as.numeric(as.character(x)))
head(df_cor)
res<- cor(df_cor, method = "spearman", use = "complete.obs")
round(res, 2)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
df <- df %>%
mutate(amountSpent = RoomService+FoodCourt+ShoppingMall+Spa+VRDeck)
kable(cbind("amountSpent"=head(df)$amountSpent), align = 'c')
amountSpenteTransported <- filter(df, Transported==TRUE)$amountSpent
amountSpenteNOTransported <- filter(df, Transported==FALSE)$amountSpent
wilcox.test(amountSpenteNOTransported, amountSpenteTransported)
df_raw <- df
Index <- createDataPartition(df_raw$Transported, p=0.7, list=FALSE,times=1)
df <- df_raw[Index,]
df_validation <- df_raw[-Index,]
df1 <- select(df, -c(PassengerId, PassengerGroup, HomePlanet, Destination,VIP, PassengerNumInGroup, CabinPlatform, Age, amountSpent))
model_log <- glm(Transported ~ ., data = df1, family = binomial(link='logit'))
summary(model_log)
fitted.results <- predict(model_log,
newdata = select(df_validation, c(CryoSleep,
RoomService,
FoodCourt,
ShoppingMall,
Spa,VRDeck,
CabinNumber,
CabinSide))
,type = "response")
fitted.results_FACTOR <- ifelse(fitted.results > 0.5,TRUE,FALSE)
resultado_comprobacion <- cbind("ID"=df_validation$PassengerId,
"Transported"=df_validation$Transported,
"Prediction"=fitted.results_FACTOR)
df_validation_info <- as.data.frame(resultado_comprobacion)
kable(head(df_validation_info),align='c', row.names=FALSE)
df_validation_info$Transported <- as.factor(df_validation_info$Transported)
df_validation_info$Prediction <- as.factor(df_validation_info$Prediction)
confusionMatrix(df_validation_info$Transported, df_validation_info$Prediction)
pr <- prediction(fitted.results, df_validation$Transported)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
df_validation_info$Transported <- as.factor(df_validation_info$Transported)
df_validation_info$Prediction <- as.factor(df_validation_info$Prediction)
confusionMatrix(df_validation_info$Transported, df_validation_info$Prediction)
fitted.results <- predict(model_log,
newdata = select(df_validation, c(CryoSleep,
RoomService,
FoodCourt,
ShoppingMall,
Spa,VRDeck,
CabinNumber,
CabinSide))
,type = "response")
fitted.results_FACTOR <- ifelse(fitted.results > 0.5,TRUE,FALSE)
resultado_comprobacion <- cbind("ID"=df_validation$PassengerId,
"Transported"=df_validation$Transported,
"Prediction"=fitted.results_FACTOR)
df_validation_info <- as.data.frame(resultado_comprobacion)
kable(head(df_validation_info),align='c', row.names=FALSE)
fitted.results_FACTOR <- ifelse(fitted.results > 0.5,TRUE,FALSE)
resultado_comprobacion <- cbind("ID"=df_validation$PassengerId,
"Transported"=df_validation$Transported,
"Prediction"=fitted.results_FACTOR)
df_validation_info <- as.data.frame(resultado_comprobacion)
kable(head(df_validation_info),align='c', row.names=FALSE)
df_validation_info$Transported <- as.factor(df_validation_info$Transported)
df_validation_info$Prediction <- as.factor(df_validation_info$Prediction)
confusionMatrix(df_validation_info$Transported, df_validation_info$Prediction)
